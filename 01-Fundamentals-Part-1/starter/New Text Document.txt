/////////////VARIABLES
Varible name convention
-DECLARATION - let nameVariable = "Name";
-lowerCamelCase
-dont use upper case at first but in oop we can use so better not to use it.
-PI-- all upper case as it is constant dont change
-variable should  be readable

rules
-cannot use new, function as they are reserved keyword in javascript
-cannot follow a numeric literal.i.e-let 3years = 3;
-variable can only contain numbers ,letters ,dollar sign ,underscor.
-we can use name but this is also reserved keyword so better not to use name.

//////////DATA TYPE
Value types - object , PRIMTIVE
7 PRIMTIVE DATATYPE
-numbers - floating points numbers ,(used for decimals and int).--int or deci nai in javascript
-string - sequence of characters , used for text! USE ''/"" FOR THIS OR ELSE JavaScript will get confused.
-boolean-logical type true or false
-undefined- Value taken by a variable that is not yet defined(empty value) 
-null- empty 
-symbol- ES2015 value that is unique and cannot be changed (not useful)
-bigIntn- larger integer than Numbr type can hold.

//INTERVIEW Q-
JavaScript has dymanic typing means, when you create a new variable,
you do not have to manually define the data type
of the value that it contains.

-DATA TYPE of the value stored in a variable is determined automatically.

-another important application of dynamic typing
is that later in our code, we can assign a new value
with a different data type to the same variable
without a problem.variable x can initially be a number
and then later a string, that's not a problem at all.

In Javascrict value has a type not the variable
-JavaScript programs are executed
from top to bottom
//--comment
//INTERVIEW Q-
-undefined is the value taken
by a variable that is not yet defined.
-when you declare
an empty variable like this
it will automatically hold the value of undefined;
print korte gele just light grey color er undefined ashe.
ex-let year;

ERROR OF TYPE OF console.log(typeof null); IS SHOULD NULL BUT SHOWS OBJECT. THIS IS A BUG BUT THIS IS NOT FIXED BECAUSE OF LEGACY RESAONS.

let and var are for not constant variable
const is for const variable
we dont need to decare a variable we can just write name1 =dfv;
but this is terrible because this declared in global Varible;

// Type Conversion and Coercion
// type conversion 
const inputYear = "1991";
console.log(Number(inputYear), inputYear); //console e print hobe as a number
console.log(Number(inputYear) + 18); // number dhore eitake addition kora hoise

console.log(Number("Jonas")); // console e print hobe not a number NaN mane invalid number (when an operation that involves number fails to produce a new number).
//console.log(typeof NaN);

console.log(String(23), 23); //string white color hobe ar number diff
// we can only convert to a number, to a string, and to a boolean.
// type coercion
//similar as templete literal
//So basically, type coercion happens whenever an operator is dealing with two values that have different types.So in that case, JavaScript will then, behind the scenes,convert one of the values to match the other value so that in the end,the operation can be executed.
console.log("I am " + 23 + " years old");
//Now, actually not all the operators do type coercion to string.

console.log("23" - "10" - 3); ==> 10 ashbe , So in this case, minus operator triggers the opposite conversion, so strings are converted to numbers
and not the other way around.
console.log("23" / "2");

console.log("23" + "10" + 3); ==> 23103 ashbe . the three is converted to a string and then the three strings are concatenated.
-/* ora trigger korbe oi operation hobe.
+ er tay string e number thakleo, and the number shob kichu string hoye jabe (ex- n = "1" +1 == 11)
ex '10'-'4'-'3'-2 +'5'==15 kemne hoilo= 10-4-3-2=1 then abar plus string ashche
BE CAREFULL JOKHN STRING ER ASHE PASHE + THAKE AND IF THE STRING CONTAING NUMBER

// Truthy and Falsy Values
They're not exactly false initially, but they will become false when converted to a boolean. 
// 5 falsy values: 0, emptystring '', undefined, null, NaN

console.log(Boolean(0));
console.log(Boolean(undefined));
console.log(Boolean('Jonas'));-- true
console.log(Boolean({}));--true
console.log(Boolean(''));

JavaScript do type coercion to booleans in two scenarios. 
First, when using logical operators, and second in a logical context, 
like for example, in the condition of an if else statement.


const money = 0;
if (money) {
  console.log("Don't spend it all ");
} else {
  console.log('You should get a job!');
}
//this number zero will be converted to false.so boolean return korbe false so eita else e jabe 

let height = 0;
if (height) {
  console.log('YAY! Height is defined');
} else {
  console.log('Height is UNDEFINED');
}

////////////////////////////////////
// Equality Operators: == vs. ===
/*const age = "18";
if (age === 18) console.log("You just became an adult :D (strict)"); dibe ans naile kichu dibena

if (age == 18) console.log("You just became an adult :D (loose)"); eita hocche type coersion hobe 
example- '18' == 18 true dibe 
 always try to use ===
const favourite = Number(prompt("What's your favourite number?"));==window choto create kore for asking
console.log(favourite); eita string hobe jodi ageh number na likhe 
not equal !== strict
!= not strict
////////boolean hoche theory not or and
// Logical Operators

const hasDriversLicense = true; // A
const hasGoodVision = true; // B

console.log(hasDriversLicense && hasGoodVision);--T
console.log(hasDriversLicense || hasGoodVision);T
console.log(!hasDriversLicense);F

// if (hasDriversLicense && hasGoodVision) {
//   console.log('Sarah is able to drive!');
// } else {
//   console.log('Someone else should drive...');
// }

const isTired = false; 
console.log(hasDriversLicense && hasGoodVision && isTired);

if (hasDriversLicense && hasGoodVision && !isTired) {-- SHE IS NOT TIRED
  console.log('Sarah is able to drive!');
} else {
  console.log('Someone else should drive...');
}

////////////////////////////////////
// The switch Statement
const day = 'friday';

switch (day) {
  case 'monday': // day === 'monday'
    console.log('Plan course structure');
    console.log('Go to coding meetup');
    break;
  case 'tuesday':
    console.log('Prepare theory videos');
    break;
  case 'wednesday':// both wed and thursday same jinish hobe
  case 'thursday':
    console.log('Write code examples');
    break;
  case 'friday':
    console.log('Record videos');
    break;
  case 'saturday':
  case 'sunday':
    console.log('Enjoy the weekend :D');
    break;
  default:
    console.log('Not a valid day!');
}
structure--- const x = k;
switch(x){
    case '1' :
    console.log('dg');
    break;
    case '2' :
    console.log('gj');
    break;
    default:
    console.log('dg');

}

without the break,the code simply continues executing . monday break na dile tuesday o nibe

// Statements and Expressions
expressions produce values,
and that statements are like full sentences that performs action
3 + 4 Expressions
1991 Expressions as eita toh value produce korbe
true && false && !false Expressions

Statements
if (23 > 10) {
  const str = '23 is bigger';
}
we can only insert expressions, but not statements in templete literal.
const me = 'Jonas';
console.log(`I'm ${2037 - 1991} years old ${me}`);
////////
 The Conditional (Ternary) Operator
const age = 23;
// age >= 18 ? console.log('I like to drink wine 🍷') : console.log('I like to drink water 💧');

const drink = age >= 18 ? 'wine 🍷' : 'water 💧';
console.log(drink);
 structure--
 const x = age >= 18? 'wine' : 'water';
 console.log(x),

let drink2;
if (age >= 18) {
  drink2 = 'wine 🍷';
} else {
  drink2 = 'water 💧';
}
console.log(drink2);
console.log(`I like to drink ${age >= 18 ? 'wine 🍷' : 'water 💧'}`);
since the ternary operator is really an expression,
we can now use it inside a template literal.


